generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../prisma/ERD.md"
  theme    = "forest"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Item {
  itemIdx         Int           @id @default(autoincrement()) @map("id")
  mapleItemId     Int           @map("maple_item_id")
  nameKor         String        @map("name_kor") @db.Text
  nameEng         String        @map("name_eng") @db.Text
  descriptionKor  String        @map("description_kor") @db.Text
  descriptionEng  String        @map("description_eng") @db.Text
  overallCategory String        @map("overall_category") @db.Text
  category        String        @map("category") @db.Text
  subCategory     String        @map("sub_category") @db.Text
  reqLevel        Int           @map("req_level")
  reqStr          Int           @map("req_str")
  reqDex          Int           @map("req_dex")
  reqInt          Int           @map("req_int")
  reqLuk          Int           @map("req_luk")
  reqPop          Int           @map("req_pop")
  reqJob          Int           @map("req_job")
  upgradableCount Int           @map("upgradable_count")
  incPhAttack     Int           @map("inc_ph_attack")
  incMgAttack     Int           @map("inc_mg_attack")
  incPhDefence    Int           @map("inc_ph_defence")
  incMgDefence    Int           @map("inc_mg_defence")
  incStr          Int           @map("inc_str")
  incDex          Int           @map("inc_dex")
  incInt          Int           @map("inc_int")
  incLuk          Int           @map("inc_luk")
  incHp           Int           @map("inc_hp")
  incMp           Int           @map("inc_mp")
  optEtc          String?       @map("opt_etc") @db.Text
  priceShop       Int           @map("price_shop")
  priceAverage    Int           @map("price_average")
  views           BigInt        @default(0)
  createdDt       DateTime      @default(now()) @map("created_dt")
  updatedDt       DateTime      @updatedAt @map("updated_dt")
  deletedDt       DateTime?     @map("deleted_dt")
  monsterDrops    MonsterDrop[]

  @@map("items")
}

model MonsterDrop {
  id         Int     @id @default(autoincrement())
  monsterId  Int     @map("monster_id")
  itemId     Int     @map("item_id")
  dropChance String  @map("drop_chance")
  items      Item    @relation(fields: [itemId], references: [itemIdx])
  monsters   Monster @relation(fields: [monsterId], references: [monsterIdx])

  @@map("monster_drops")
}

model Monster {
  monsterIdx      Int           @id @default(autoincrement()) @map("id")
  mapleMobId      Int           @map("maple_mob_id")
  nameKor         String        @map("name_kor")
  nameEng         String        @map("name_eng")
  descriptionKor  String        @map("description_kor") @db.Text
  descriptionEng  String        @map("description_eng") @db.Text
  level           Int
  hp              Int
  mp              Int
  exp             Int
  phAttack        Int           @map("ph_attack")
  mgAttack        Int           @map("mg_attack")
  phDefence       Int           @map("ph_defence")
  mgDefence       Int           @map("mg_defence")
  isUndead        Boolean       @map("is_undead")
  dropMoney       Int           @map("drop_money")
  dropMoneyChance String        @map("drop_money_chance")
  createdDt       DateTime      @default(now()) @map("created_dt")
  updatedDt       DateTime      @updatedAt @map("updated_dt")
  deletedDt       DateTime?     @map("deleted_dt")
  views           BigInt        @default(0)
  monsterDrops    MonsterDrop[]

  @@map("monsters")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   Int
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  image         String?
  email         String    @unique
  emailVerified DateTime?
  gameNick      String?   @unique @map("game_nick")
  gameTcNick    String?   @map("game_tc_nick")
  gameLevel     Int       @default(0) @map("game_level")
  gameJob       String    @default("초보자") @map("game_job")
  password      String    @default(cuid())
  role          Int       @default(0)
  coin          Int       @default(0)
  createdDt     DateTime  @default(now()) @map("created_dt")
  updatedDt     DateTime  @updatedAt @map("updated_dt")
  deletedDt     DateTime? @map("deleted_dt")
  accounts      Account[]
  posts         Board[]
  comments      Comment[]
  joinedParties Party[]   @relation("PartyToUser")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Letter {
  letterIdx Int       @id @default(autoincrement()) @map("letter_idx")
  content   String    @db.Text
  from      Int
  to        Int
  coin      Int       @default(0)
  isRead    Boolean   @default(false) @map("is_read")
  createdDt DateTime  @default(now()) @map("created_dt")
  deletedDt DateTime? @map("deleted_dt")

  @@map("letters")
}

model Party {
  partyIdx         Int       @id @default(autoincrement()) @map("party_idx")
  categoryId       Int
  description      String    @db.Text
  recruiterId      Int       @map("recruiter_id")
  peopleLimit      Int       @default(2) @map("people_limit")
  levelLimit       Int       @default(0) @map("level_limit")
  recruitStartTime DateTime  @default(now()) @map("recruit_st_time")
  recruitEndTime   DateTime  @map("recruit_ed_time")
  isEnd            Boolean   @default(false)
  views            BigInt    @default(0)
  createdDt        DateTime  @default(now()) @map("created_dt")
  updatedDt        DateTime  @updatedAt @map("updated_dt")
  deletedDt        DateTime? @map("deleted_dt")
  participants     User[]    @relation("PartyToUser")

  @@map("parties")
}

model PartyCategory {
  ptCategoryIdx Int    @id @default(autoincrement()) @map("pt_category_idx")
  name          String
  location      String

  @@map("party_category")
}

model Board {
  boardIdx    Int       @id @default(autoincrement()) @map("board_idx")
  title       String
  description String    @db.Text
  writerId    Int       @map("writer_id")
  category    Int
  views       BigInt    @default(0)
  createdDt   DateTime  @default(now()) @map("created_dt")
  updatedDt   DateTime  @updatedAt @map("updated_dt")
  deletedDt   DateTime? @map("deleted_dt")
  writer      User      @relation(fields: [writerId], references: [id])
  commnets    Comment[]

  @@map("boards")
}

model Comment {
  commentIdx      Int       @id @default(autoincrement()) @map("comment_idx")
  comment         String    @db.Text
  parentCommentId Int?      @map("parent_comment_id")
  boardId         Int       @map("board_id")
  writerId        Int       @map("writer_id")
  createdDt       DateTime  @default(now()) @map("created_dt")
  updatedDt       DateTime  @updatedAt @map("updated_dt")
  deletedDt       DateTime? @map("deleted_dt")
  board           Board     @relation(fields: [boardId], references: [boardIdx])
  writer          User      @relation(fields: [writerId], references: [id])

  @@map("comments")
}
